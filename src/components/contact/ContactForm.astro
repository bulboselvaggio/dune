<section class="py-16 sm:py-20">
  <div class="mx-auto max-w-2xl px-4 sm:px-6 lg:max-w-7xl lg:px-8">
    <div class="grid gap-12 lg:grid-cols-2 lg:gap-8">
      <div class="flex flex-col gap-4 sm:gap-6">
        <h2 class="text-3xl font-medium tracking-tight sm:text-4xl">Contattaci</h2>
        <p class="text-primary-950/70 dark:text-primary-200/70 max-w-lg text-lg sm:text-xl">
          We'd love to learn more about you and what we can build together.
        </p>
      </div>
      <form
        id="contact-form"
        action="#"
        method="POST"
        data-netlify="true"
        name="contact-form"
        class="mt-3 flex flex-col gap-y-6"
      >
        <input type="hidden" name="form-name" value="contact-form" />
        <!-- Full name input -->
        <div>
          <label for="full-name" class="sr-only">Full name</label>
          <input
            type="text"
            name="full-name"
            id="full-name"
            autocomplete="name"
            class="hover:ring-primary-600 focus:ring-primary-600 dark:hover:ring-primary-400 dark:focus:ring-primary-400 bg-primary-50 dark:bg-primary-950 ring-primary-900/40 dark:ring-primary-200/40 placeholder:text-primary-950/60 dark:placeholder:text-primary-200/60 block w-full appearance-none rounded-md border-0 px-4 py-4 text-base ring-1 transition focus:outline-none focus:ring-2"
            placeholder="Full name"
            required
          />
        </div>
        <!-- Email input -->
        <div>
          <label for="email" class="sr-only">Email</label>
          <input
            type="email"
            name="email"
            id="email"
            autocomplete="email"
            class="hover:ring-primary-600 focus:ring-primary-600 dark:hover:ring-primary-400 dark:focus:ring-primary-400 bg-primary-50 dark:bg-primary-950 ring-primary-900/40 dark:ring-primary-200/40 placeholder:text-primary-950/60 dark:placeholder:text-primary-200/60 block w-full appearance-none rounded-md border-0 px-4 py-4 text-base ring-1 transition focus:outline-none focus:ring-2"
            placeholder="Email"
            required
          />
        </div>
        <!-- Message textarea -->
        <div>
          <label for="message" class="sr-only">Message</label>
          <textarea
            name="message"
            id="message"
            rows="3"
            class="hover:ring-primary-600 focus:ring-primary-600 dark:hover:ring-primary-400 dark:focus:ring-primary-400 bg-primary-50 dark:bg-primary-950 ring-primary-900/40 dark:ring-primary-200/40 placeholder:text-primary-950/60 dark:placeholder:text-primary-200/60 block w-full appearance-none rounded-md border-0 px-4 py-4 text-base ring-1 transition focus:outline-none focus:ring-2"
            placeholder="Message"
            required
          ></textarea>
        </div>
        <!-- Submit button -->
        <div>
          <button
            class="bg-primary-600 dark:bg-primary-400 hover:bg-primary-700 dark:hover:bg-primary-300 focus-visible:outline-primary-600 dark:focus-visible:outline-primary-400 dark:text-primary-950 inline-flex items-center justify-center rounded-full border border-transparent px-5 py-3 text-base font-medium text-white transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
            type="submit"
          >
            Submit
          </button>
        </div>
        <!-- Success message -->
        <p class="hidden text-green-600" id="form-success">
          Thank you! Your message has been sent!
        </p>
      </form>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("contact-form") as HTMLFormElement | null;
    const successMessage = document.getElementById("form-success");

    if (!form || !successMessage) {
      console.error("Form or success message not found.");
      return;
    }

    form.addEventListener("submit", async (event) => {
      event.preventDefault(); // Blocca il comportamento predefinito del form

      const formData = new FormData(form);

      try {
        const response = await fetch("/", {
          method: "POST",
          body: formData,
        });

        if (response.ok) {
          form.reset(); // Resetta il form
          successMessage.classList.remove("hidden"); // Mostra il messaggio di successo
          setTimeout(() => {
            successMessage.classList.add("hidden"); // Nasconde il messaggio dopo 5 secondi
          }, 5000);
        } else {
          alert("Si è verificato un problema. Riprova più tardi.");
        }
      } catch (error) {
        alert("Errore di rete. Controlla la connessione e riprova.");
      }
    });
  });
</script>
